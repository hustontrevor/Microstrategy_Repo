<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<PROCEDURE_DEFINITION>
<DESCRIPTION/>
<CODE>// LIST PROPERTIES FOR ALL ATTRIBUTES IN sProject&#13;
&#13;
//String sNAME;  // Name of the attribute, returned as a string.&#13;
//String sPATH;  //The folder path that contains the attribute, returned as a string.&#13;
//Boolean bHIDDEN;  // Whether the attribute is hidden, returned as a boolean value.As &#13;
//&#13;
//String sID;  // The object ID of the attribute, returned as a string.&#13;
//String sDESCRIPTION;  // The attribute's description, returned as a string.&#13;
//String sLONG_DESCRIPTION;  // Long description of the attribute, returned as a string.&#13;
//Date dCREATION_TIME;  // Date and time the attribute was created, returned as a date/string.&#13;
//Date dMODIFICATION_TIME;  // Date and time the attribute was last modified, returned as a date/string.It probalby &#13;
//String sOWNER;  // Owner of the attribute, returned as a string.&#13;
//&#13;
//ResultSet rsATTRIBUTE_FORM;  // A ResultSet describing the attribute forms of the current attribute.&#13;
//	String sATTRIBUTE_FORM_NAME;  // The name of the attribute form, returned as a string.  &#13;
//	String sATTRIBUTE_FORM_CATEGORY;  // The category of the attribute form, returned as a string.&#13;
//	String sATTRIBUTE_FORM_DESC;  // The description of the attribute form, returned as a string.&#13;
//	String sATTRIBUTE_FORM_TYPE;  // The type of the attribute form, returned as a string.&#13;
//	int iATTRIBUTE_FORM_REPORTSORT;  // The order in which to sort the elements in a report, returned as an integer;  1= Ascending; 2= Descending&#13;
//	int iATTRIBUTE_FORM_BROWSESORT;  // The order in which to sort the elements for browsing, returned as an integer;   1= Ascending; 2= Descending&#13;
//	String sATTRIBUTE_LOOKUP_TABLE;  // The lookup table of the current attribute form, returned as a string.&#13;
//	ResultSet rsATTRIBUTE_EXPRESSION_LIST;  // A ResultSet describing the attribute expression.&#13;
//		String sSCHEMA_EXPRESSION;  // The schema expression associated with the attribute expression, returned as a string.&#13;
//		String sMAPPING_METHOD;  // The mapping method between the attribute and the source table, either automatic or manual. Returned as a string.&#13;
//	ResultSet rsATTRIBUTE_MAPPING_TABLE_LIST;  // A ResultSet containing information about attribute mapping.&#13;
//		String sSCHEMA_CANDIDATE_TABLE;  // Tables from which the attribute can return data, returned as a string.&#13;
//		int iATTRIBUTE_FORM_MULTILINGUAL;  // Whether the attribute form is multilingual, returned as an integer;  0= False; 1= True&#13;
//&#13;
//ResultSet rsATTRIBUTE_CHILDREN;  // A ResultSet containing information about the attribute's child.&#13;
//	String sATTRIBUTE_CHILD;  // The child of the current attribute, returned as a string.&#13;
//	String sATTRIBUTE_CHILD_RELATIONSHIP;  // Relationship between the attribute and child attribute, such as many to one. Returned as a string.&#13;
//	String sATTRIBUTE_CHILD_TABLE;  // Table the attribute child is stored in, returned as a string.&#13;
//	String sPATH2;  // Folder path of the attribute child, returned as a string.&#13;
//&#13;
//ResultSet rsATTRIBUTE_PARENTS;  // A ResultSet with information about the attribute's parent.&#13;
//	String sATTRIBUTE_PARENT;  // The parent of the current attribute, returned as a string.&#13;
//	String sATTRIBUTE_PARENT_RELATIONSHIP;  // Type of relationship the attribute has with its parent, such as many to one. Returned as a string.&#13;
//	String sATTRIBUTE_PARENT_TABLE;  // Table the attribute's parent is stored in, returned as a string.&#13;
//	String sPATH3;  // The folder path of the parent attribute, returned as a string.&#13;
//&#13;
//ResultSet rsATTRIBUTE_DISPLAY;  // A ResultSet with attribute display details.&#13;
//	String sATTRIBUTE_ELEMENT_DISPLAY;  // Whether attribute element display is locked, unlocked, or limited, returned as a string. If it is limited, it indicates how many elements can display at a time.&#13;
//	Boolean bATTR_APPLY_SEC_FILTERS_TO_ELEM_BROWSING;  // Whether security filters are applied to element browsing, returned as a boolean value.&#13;
//	Boolean bATTR_ENABLE_ELEMENT_CACHING;  // Whether element caching is enabled, returned as a boolean value.&#13;
//	ResultSet rsBROWSE_FORMS_LIST;  // A ResultSet about how attribute forms are displayed when browsing.&#13;
//		String sATTR_BROWSE_DISPLAY;  // The attribute forms displayed when browsing, returned as a string.&#13;
//	ResultSet rsREPORT_DISPLAY_LIST;  // A ResultSet about how attribute forms are displayed in a report.&#13;
//		String sATTR_REPORT_DISPLAY;  // The attribute forms displayed on a report, returned as a string.&#13;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////&#13;
&#13;
// Retrieve all the Attributes in the Project&#13;
ResultSet fResultSet = executeCapture("LIST ALL ATTRIBUTES FOR PROJECT '" + sProject + "';");&#13;
java.text.Format formatter = new java.text.SimpleDateFormat("yyyy-MM-dd");&#13;
&#13;
printOut("sNAME,sPATH,bHIDDEN,"&#13;
+"sID,dCREATION_TIME,dMODIFICATION_TIME,sOWNER,"&#13;
+"sATTRIBUTE_FORM_NAME,sATTRIBUTE_FORM_CATEGORY,sATTRIBUTE_FORM_TYPE,iATTRIBUTE_FORM_REPORTSORT,iATTRIBUTE_FORM_BROWSESORT,sATTRIBUTE_LOOKUP_TABLE,"&#13;
+"sFormBrowse,sFormReport,"&#13;
+"sSCHEMA_EXPRESSION,sMAPPING_METHOD,"&#13;
+"iMAPPING_TABLE_COUNT,sMAPPING_TABLE_LIST");&#13;
&#13;
try{&#13;
fResultSet.moveFirst();  	&#13;
while(!fResultSet.isEof()){ &#13;
	String sAttributeLn = "";&#13;
&#13;
	String sNAME = fResultSet.getResultCell(DisplayPropertyEnum.NAME).getValueString();&#13;
	String sPATH = fResultSet.getResultCell(DisplayPropertyEnum.PATH).getValueString();&#13;
	Boolean bHIDDEN = (Boolean) fResultSet.getResultCell(DisplayPropertyEnum.HIDDEN).getValue();&#13;
&#13;
//    String[] arr = { "Admit Date","Budget Actual End Date","Budget Actual Start Date","Budget CRG End Date","Budget CRG Start Date","Budget Evaluation Period End Date","Budget Evaluation Period Start Date","Care System Effective End Date","Care System Effective Start Date","Claim Date","Claim Service Date","Coverage End Date","Coverage Start Date","Current Line Of Business End Date","Current Line Of Business Start Date","Discharge Date","Member DOB","Paid Date","Paid Through Date","Person DOB","Posted Date","Product End Date","Product Start Date","QBPC Effective Date","QBPC Term Date","QBVP Effective Date","QBVP Term Date","Reporting Period","Rx Effective Date","Rx Termination Date","Service Date","Termination Date","VIS Paid Thru Date","Visit Service End Date","Visit Service Start Date"};&#13;
//    Set&lt;String&gt; names = new HashSet&lt;String&gt;(Arrays.asList(arr));&#13;
//    if ( names.contains(sNAME) ){&#13;
//     if ( sNAME.toLowerCase().contains("city") &#13;
//|| sNAME.toLowerCase().contains("county")&#13;
//|| sNAME.toLowerCase().contains("state")&#13;
//|| sNAME.toLowerCase().contains("zip")){&#13;
&#13;
	ResultSet rsPropertySet = executeCapture("LIST ALL PROPERTIES FOR ATTRIBUTE '" + sNAME + "' IN FOLDER '" + sPATH + "' FOR PROJECT '" + sProject + "';");&#13;
	rsPropertySet.moveFirst();  	&#13;
	while(!rsPropertySet.isEof()){ &#13;
		if (bDebug){	printOut(sNAME + "," + sPATH + "," + bHIDDEN);}&#13;
		sAttributeLn += "\"" + sNAME + "\",\"" + sPATH + "\"," + bHIDDEN + ",";&#13;
&#13;
		String sID = rsPropertySet.getResultCell(DisplayPropertyEnum.ID).getValueString();&#13;
		String sDESCRIPTION = rsPropertySet.getResultCell(DisplayPropertyEnum.DESCRIPTION).getValueString();&#13;
		String sLONG_DESCRIPTION = rsPropertySet.getResultCell(DisplayPropertyEnum.LONG_DESCRIPTION).getValueString();&#13;
		Date dCREATION_TIME = (Date) rsPropertySet.getResultCell(DisplayPropertyEnum.CREATION_TIME).getValue();&#13;
		Date dMODIFICATION_TIME = (Date) rsPropertySet.getResultCell(DisplayPropertyEnum.MODIFICATION_TIME).getValue();&#13;
		String sOWNER = rsPropertySet.getResultCell(DisplayPropertyEnum.OWNER).getValueString();&#13;
		if (bDebug){	printOut("ATTR:   " + sID + "," + sDESCRIPTION + "," + sLONG_DESCRIPTION + "," + dCREATION_TIME + "," + dMODIFICATION_TIME  + "," + sOWNER);}&#13;
		sAttributeLn += sID + "," + formatter.format(dCREATION_TIME) + "," + formatter.format(dMODIFICATION_TIME)  + ",\"" + sOWNER + "\",";&#13;
&#13;
		ResultSet rsATTRIBUTE_FORM = (ResultSet) rsPropertySet.getResultCell(DisplayPropertyEnum.ATTRIBUTE_FORM).getValue();&#13;
		rsATTRIBUTE_FORM.moveFirst();  	&#13;
		while(!rsATTRIBUTE_FORM.isEof()){ &#13;
			String sFormLn = "";&#13;
			String sATTRIBUTE_FORM_NAME = rsATTRIBUTE_FORM.getResultCell(DisplayPropertyEnum.ATTRIBUTE_FORM_NAME).getValueString();&#13;
			String sATTRIBUTE_FORM_CATEGORY = rsATTRIBUTE_FORM.getResultCell(DisplayPropertyEnum.ATTRIBUTE_FORM_CATEGORY).getValueString();&#13;
			String sATTRIBUTE_FORM_DESC = rsATTRIBUTE_FORM.getResultCell(DisplayPropertyEnum.ATTRIBUTE_FORM_DESC).getValueString();&#13;
			String sATTRIBUTE_FORM_TYPE = rsATTRIBUTE_FORM.getResultCell(DisplayPropertyEnum.ATTRIBUTE_FORM_TYPE).getValueString();&#13;
			Integer iATTRIBUTE_FORM_REPORTSORT = (Integer) rsATTRIBUTE_FORM.getResultCell(DisplayPropertyEnum.ATTRIBUTE_FORM_REPORTSORT).getValue();&#13;
			Integer iATTRIBUTE_FORM_BROWSESORT = (Integer) rsATTRIBUTE_FORM.getResultCell(DisplayPropertyEnum.ATTRIBUTE_FORM_BROWSESORT).getValue();&#13;
			Integer iATTRIBUTE_FORM_MULTILINGUAL = (Integer) rsATTRIBUTE_FORM.getResultCell(DisplayPropertyEnum.ATTRIBUTE_FORM_MULTILINGUAL).getValue();&#13;
			String sATTRIBUTE_LOOKUP_TABLE = rsATTRIBUTE_FORM.getResultCell(DisplayPropertyEnum.ATTRIBUTE_LOOKUP_TABLE).getValueString();	&#13;
			if (bDebug){	printOut("FORM:   " + sATTRIBUTE_FORM_NAME + "," + sATTRIBUTE_FORM_CATEGORY + "," + sATTRIBUTE_FORM_DESC + "," + sATTRIBUTE_FORM_TYPE + "," + iATTRIBUTE_FORM_REPORTSORT + "," + iATTRIBUTE_FORM_BROWSESORT + "," + iATTRIBUTE_FORM_MULTILINGUAL + "," + sATTRIBUTE_LOOKUP_TABLE);}&#13;
			sFormLn += "\"" + sATTRIBUTE_FORM_NAME + "\"," + sATTRIBUTE_FORM_CATEGORY + "," + sATTRIBUTE_FORM_TYPE + "," + iATTRIBUTE_FORM_REPORTSORT + "," + iATTRIBUTE_FORM_BROWSESORT + "," + sATTRIBUTE_LOOKUP_TABLE + ",";&#13;
			&#13;
			ResultSet rsATTRIBUTE_DISPLAY = (ResultSet) rsPropertySet.getResultCell(DisplayPropertyEnum.ATTRIBUTE_DISPLAY).getValue();&#13;
			rsATTRIBUTE_DISPLAY.moveFirst();  	&#13;
			while(!rsATTRIBUTE_DISPLAY.isEof()){ &#13;
				String sFormBrowse = "false";&#13;
				String sFormReport = "false";&#13;
				String sATTRIBUTE_ELEMENT_DISPLAY = rsATTRIBUTE_DISPLAY.getResultCell(DisplayPropertyEnum.ATTRIBUTE_ELEMENT_DISPLAY).getValueString();&#13;
				Boolean bATTR_APPLY_SEC_FILTERS_TO_ELEM_BROWSING = (Boolean) rsATTRIBUTE_DISPLAY.getResultCell(DisplayPropertyEnum.ATTR_APPLY_SEC_FILTERS_TO_ELEM_BROWSING).getValue();&#13;
				Boolean bATTR_ENABLE_ELEMENT_CACHING = (Boolean) rsATTRIBUTE_DISPLAY.getResultCell(DisplayPropertyEnum.ATTR_ENABLE_ELEMENT_CACHING).getValue();&#13;
				if (bDebug){	printOut("DISPLAY:   " + sATTRIBUTE_ELEMENT_DISPLAY + "," + bATTR_APPLY_SEC_FILTERS_TO_ELEM_BROWSING + "," + bATTR_ENABLE_ELEMENT_CACHING);}&#13;
			&#13;
				ResultSet rsBROWSE_FORMS_LIST = (ResultSet) rsATTRIBUTE_DISPLAY.getResultCell(DisplayPropertyEnum.BROWSE_FORMS_LIST).getValue();&#13;
				rsBROWSE_FORMS_LIST.moveFirst();  	&#13;
				while(!rsBROWSE_FORMS_LIST.isEof()){ &#13;
					String sATTR_BROWSE_DISPLAY = rsBROWSE_FORMS_LIST.getResultCell(DisplayPropertyEnum.ATTR_BROWSE_DISPLAY).getValueString();&#13;
					if (bDebug){	printOut("BRWS FORM:   " + sATTR_BROWSE_DISPLAY);}&#13;
					if ( sATTRIBUTE_FORM_NAME.equals(sATTR_BROWSE_DISPLAY) )&#13;
						sFormBrowse = "true";&#13;
					rsBROWSE_FORMS_LIST.moveNext();&#13;
				}&#13;
&#13;
				ResultSet rsREPORT_DISPLAY_LIST = (ResultSet) rsATTRIBUTE_DISPLAY.getResultCell(DisplayPropertyEnum.REPORT_DISPLAY_LIST).getValue();&#13;
				rsREPORT_DISPLAY_LIST.moveFirst();  	&#13;
				while(!rsREPORT_DISPLAY_LIST.isEof()){ &#13;
					String sATTR_REPORT_DISPLAY = rsREPORT_DISPLAY_LIST.getResultCell(DisplayPropertyEnum.ATTR_REPORT_DISPLAY).getValueString();&#13;
					if (bDebug){	printOut("RPT DISP:   " + sATTR_REPORT_DISPLAY);}&#13;
					if ( sATTRIBUTE_FORM_NAME.equals(sATTR_REPORT_DISPLAY) )&#13;
						sFormReport = "true";&#13;
					rsREPORT_DISPLAY_LIST.moveNext();  	&#13;
				}&#13;
				&#13;
				sFormLn += sFormBrowse + "," + sFormReport + ",";&#13;
				rsATTRIBUTE_DISPLAY.moveNext();&#13;
			}&#13;
			&#13;
			ResultSet rsATTRIBUTE_EXPRESSION_LIST = (ResultSet) rsATTRIBUTE_FORM.getResultCell(DisplayPropertyEnum.ATTRIBUTE_EXPRESSION_LIST).getValue();&#13;
			if ( rsATTRIBUTE_EXPRESSION_LIST != null ) {&#13;
				rsATTRIBUTE_EXPRESSION_LIST.moveFirst(); &#13;
				while(!rsATTRIBUTE_EXPRESSION_LIST.isEof()){ &#13;
					String sExpressionLn = "";&#13;
					String sSCHEMA_EXPRESSION = rsATTRIBUTE_EXPRESSION_LIST.getResultCell(DisplayPropertyEnum.SCHEMA_EXPRESSION).getValueString();&#13;
					String sMAPPING_METHOD = ""; //rsATTRIBUTE_EXPRESSION_LIST.getResultCell(DisplayPropertyEnum.MAPPING_METHOD).getValueString();&#13;
					if (bDebug){	printOut("EXPR:   " + sSCHEMA_EXPRESSION + "," + sMAPPING_METHOD);}	&#13;
					sExpressionLn += sSCHEMA_EXPRESSION.replaceAll(",",";") + "," + sMAPPING_METHOD + ",";&#13;
&#13;
					ResultSet rsATTRIBUTE_MAPPING_TABLE_LIST = (ResultSet) rsATTRIBUTE_EXPRESSION_LIST.getResultCell(DisplayPropertyEnum.ATTRIBUTE_MAPPING_TABLE_LIST).getValue();&#13;
					rsATTRIBUTE_MAPPING_TABLE_LIST.moveFirst();  	&#13;
					int iMapCount = 0;&#13;
					String MappingTables = "";&#13;
					while(!rsATTRIBUTE_MAPPING_TABLE_LIST.isEof()){ 					&#13;
						String sSCHEMA_CANDIDATE_TABLE = rsATTRIBUTE_MAPPING_TABLE_LIST.getResultCell(DisplayPropertyEnum.SCHEMA_CANDIDATE_TABLE).getValueString();	&#13;
						if (bDebug){	printOut( "MAP TBL:   " + sSCHEMA_CANDIDATE_TABLE );}&#13;
						iMapCount ++;&#13;
						MappingTables += sSCHEMA_CANDIDATE_TABLE + ";"; &#13;
						rsATTRIBUTE_MAPPING_TABLE_LIST.moveNext();  &#13;
					}&#13;
					rsATTRIBUTE_EXPRESSION_LIST.moveNext();&#13;
//if ( sATTRIBUTE_LOOKUP_TABLE.toLowerCase().contains("geo") ){&#13;
					printOut(sAttributeLn + sFormLn + sExpressionLn + iMapCount + "," + MappingTables);&#13;
//}&#13;
				}&#13;
			} else {&#13;
//if ( sATTRIBUTE_LOOKUP_TABLE.toLowerCase().contains("geo") ){	&#13;
			printOut(sAttributeLn + sFormLn); &#13;
//}&#13;
			}&#13;
			rsATTRIBUTE_FORM.moveNext();&#13;
		}&#13;
&#13;
//		ResultSet rsATTRIBUTE_CHILDREN = (ResultSet) rsPropertySet.getResultCell(DisplayPropertyEnum.ATTRIBUTE_CHILDREN).getValue();&#13;
//		rsATTRIBUTE_CHILDREN.moveFirst();  	&#13;
//		while(!rsATTRIBUTE_CHILDREN.isEof()){ &#13;
//			String sATTRIBUTE_CHILD = rsATTRIBUTE_CHILDREN.getResultCell(DisplayPropertyEnum.ATTRIBUTE_CHILD).getValueString();&#13;
//			String sATTRIBUTE_CHILD_RELATIONSHIP = rsATTRIBUTE_CHILDREN.getResultCell(DisplayPropertyEnum.ATTRIBUTE_CHILD_RELATIONSHIP).getValueString();&#13;
//			String sATTRIBUTE_CHILD_TABLE = rsATTRIBUTE_CHILDREN.getResultCell(DisplayPropertyEnum.ATTRIBUTE_CHILD_TABLE).getValueString();&#13;
//			String sPATH2 = rsATTRIBUTE_CHILDREN.getResultCell(DisplayPropertyEnum.PATH).getValueString();&#13;
//			rsATTRIBUTE_CHILDREN.moveNext();  &#13;
//		}&#13;
//&#13;
//		ResultSet rsATTRIBUTE_PARENTS = (ResultSet) rsPropertySet.getResultCell(DisplayPropertyEnum.ATTRIBUTE_PARENTS).getValue();&#13;
//		rsATTRIBUTE_PARENTS.moveFirst();  	&#13;
//		while(!rsATTRIBUTE_PARENTS.isEof()){ &#13;
//			String sATTRIBUTE_PARENT = rsATTRIBUTE_PARENTS.getResultCell(DisplayPropertyEnum.ATTRIBUTE_PARENT).getValueString();&#13;
//			String sATTRIBUTE_PARENT_RELATIONSHIP = rsATTRIBUTE_PARENTS.getResultCell(DisplayPropertyEnum.ATTRIBUTE_PARENT_RELATIONSHIP).getValueString();&#13;
//			String sATTRIBUTE_PARENT_TABLE = rsATTRIBUTE_PARENTS.getResultCell(DisplayPropertyEnum.ATTRIBUTE_PARENT_TABLE).getValueString();&#13;
//			String sPATH3 = rsATTRIBUTE_PARENTS.getResultCell(DisplayPropertyEnum.PATH).getValueString();&#13;
//			rsATTRIBUTE_PARENTS.moveNext();  &#13;
//		}		&#13;
		rsPropertySet.moveNext();&#13;
	 }&#13;
   //  }&#13;
	fResultSet.moveNext();  &#13;
}&#13;
} catch (Exception e) {&#13;
	printErr("Error: " + e.getLocalizedMessage());&#13;
	printErr("Error: " + e.getMessage());&#13;
	printErr("Error: " + e.toString());&#13;
	printOut("LIST ALL PROPERTIES FOR ATTRIBUTE '" + fResultSet.getFieldValue(DisplayPropertyEnum.NAME) + "' IN FOLDER  '"+ fResultSet.getFieldValue(DisplayPropertyEnum.PATH)+ "' FOR PROJECT '" + sProject + "';");&#13;
}</CODE>
<SAMPLE/>
<VERSION/>
<TYPE>CUSTOM</TYPE>
<INPUT_PARAMS>
<INPUT INPUT_TYPE="STRING">sProject</INPUT>
<INPUT INPUT_TYPE="BOOLEAN">bDebug</INPUT>
</INPUT_PARAMS>
<CLASSPATH/>
<TEST_INPUT>
<TEST_INPUT_PARAM>MyProj Falcon RFQA</TEST_INPUT_PARAM>
<TEST_INPUT_PARAM>false</TEST_INPUT_PARAM>
</TEST_INPUT>
<TEST_CONNECTION_INFO>
<TEST_PSN_NAME>Dev Node 1</TEST_PSN_NAME>
<TEST_USERNAME>myuser</TEST_USERNAME>
<TEST_PASSWORD>xxxxxxxxx</TEST_PASSWORD>
</TEST_CONNECTION_INFO>
</PROCEDURE_DEFINITION>
